@page
@model RazorScriptureApp.Pages.IndexModel
<html>


@{
    ViewData["Title"] = "Index";
}

<head>
    <link href="https://fonts.googleapis.com/css?family=Oswald" rel="stylesheet">

    <style>
        h2, td, th {
            font-family: 'Oswald', san-serif;
            
        }

    </style>
</head>
<body>

    <h2>Index</h2>

    <p id="texto">
        <a asp-page="Create">Create New</a>
    </p>
    <form>
        <p>
            <select asp-for="ScriptureBook" asp-items="Model.Books">
                <option value="">All</option>
            </select>
            Search by Book or by notes keyword: <input type="text" name="SearchString">
            <input type="submit" value="Filter" />

        </p>
    </form>


    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-page="./Index" asp-route-sortOrder="@Model.BookSort"
                       asp-route-currentFilter="@Model.CurrentFilter">

                        @Html.DisplayNameFor(model => model.Scripture[0].Book)
                    </a>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Scripture[0].Chapter)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Scripture[0].Verse)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Scripture[0].Note)
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort"
                       asp-route-currentFilter="@Model.CurrentFilter">

                        @Html.DisplayNameFor(model => model.Scripture[0].Date)
                    </a>
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Scripture)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Book)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Chapter)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Verse)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Note)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Date)
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @{
        var prevDisabled = !Model.Scripture.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.Scripture.HasNextPage ? "disabled" : "";
    }

    <a asp-page="./Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.Scripture.PageIndex - 1)"
       asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-default @prevDisabled">
        Previous
    </a>
    <a asp-page="./Index"
       asp-route-sortOrder="@Model.CurrentSort"
       asp-route-pageIndex="@(Model.Scripture.PageIndex + 1)"
       asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-default @nextDisabled">
        Next
    </a>
</body>
</html>